import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:e_shopping/data/model/all_orders_model.dart';
import 'package:geolocator/geolocator.dart';
import 'package:get/get.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

import '../core/classes/status_request.dart';
import '../core/functions/handling_data.dart';
import '../core/functions/polyline_decode.dart';
import '../core/services/my_services.dart';
import '../data/datasource/remote/cart/all_orders_data.dart';
import '../data/model/order_details.dart';

abstract class DetailsController extends GetxController {}

class DetailsControllerImp extends DetailsController {
  late AllOrderModel orderModel;
  GoogleMapController? controllerMap;
  Position? position;
  StatusRequest statusRequest = StatusRequest.none;
  CameraPosition? kGooglePlex;
  List<Marker> markers = [];
  MyServices myServices = Get.find();
  AllOrdersData allOrdersData = AllOrdersData(Get.find());
  List<Autogenerated> data = [];
  StreamSubscription<Position>? positionStream;
  double? desLang;
  double? destLong;
  double? currentLang;
  double? currentLong;
  Set<Polyline> polyLineSet = {};
  Timer? timer;

  getCurrentLocation() {
    kGooglePlex = CameraPosition(
      target: LatLng(orderModel.lat!.toDouble(), orderModel.lon!.toDouble()),
      zoom: 12,
    );
    markers.add(Marker(
      markerId: MarkerId("destination"),
      position: LatLng(orderModel.lat!.toDouble(), orderModel.lon!.toDouble()),
    ));
    positionStream =
        Geolocator.getPositionStream().listen((Position? position) {
      print(position!.latitude);
      print("Fdglkjfdklgd");
      print(position.longitude);
      currentLang = position.latitude;
      currentLong = position.longitude;
      if (controllerMap != null) {
        controllerMap?.animateCamera(
            CameraUpdate.newLatLng(LatLng(currentLang!, currentLong!)));
      }
      markers.removeWhere((element) => element.markerId.value == "Current");
      markers.add(Marker(
        markerId: MarkerId("Current"),
        position: LatLng(position.latitude, position.longitude),
      ));
      update();
    });
  }

  initPoly() async {
    desLang = double.parse(orderModel.lat.toString());
    destLong = double.parse(orderModel.lon.toString());
    await Future.delayed(Duration(seconds: 1));
    await getPoly(currentLang, currentLong, desLang, destLong);
    update();
  }

  getData() async {
    statusRequest = StatusRequest.loading;
    update();
    var response =
        await allOrdersData.detailsOrderData(orderModel.id.toString());
    statusRequest = handlingData(response);
    if (StatusRequest.success == statusRequest) {
      if (response["status"] == "success") {
        data.clear();
        List d = response["data"];
        data.addAll(d.map((e) => Autogenerated.fromJson(e)));
      } else {
        statusRequest = StatusRequest.failure;
      }
    }
    update();
  }

  func() async {
    await getData();
    initPoly();
    getCurrentLocation();
  }

  refreshLocation() async {
    await Future.delayed(Duration(seconds: 2));
    timer = Timer.periodic(Duration(seconds: 10), (timer) {
      FirebaseFirestore.instance
          .collection("delivery")
          .doc(orderModel.id.toString())
          .set({
        "lat": currentLang,
        "long": currentLong,
        "deliveryid": myServices.sharedPreferences.getString("id"),
      });
    });
  }

  //for user app takes delivery Id
  getDelivery() async {
    await Future.delayed(Duration(seconds: 2));
    timer = Timer.periodic(Duration(seconds: 10), (timer) {
      FirebaseFirestore.instance
          .collection("delivery")
          .doc(orderModel.id.toString())
          .snapshots()
          .listen((event) {
        if (event.exists) {
          desLang = event.get("lat");
          destLong = event.get("long");
          updateMarkerDelivery(
            double.parse(desLang.toString()),
            double.parse(
              destLong.toString(),
            ),
          );
        }
      });
    });
  }

  updateMarkerDelivery(lat, long) {
    markers.removeWhere((element) => element.markerId.value == "des");
    markers.add(Marker(
      markerId: MarkerId("des"),
      position: LatLng(lat, long),
    ));
  }

  @override
  void onInit() {
    orderModel = Get.arguments["order"];
    func();
    refreshLocation();
    super.onInit();
  }

  @override
  void dispose() {
    positionStream!.cancel();
    controllerMap!.dispose();
    timer!.cancel();
    super.dispose();
  }
}
